const API_TOKEN = '3794a7638b5863cc60d7b2b9274fa32e';

// –ü–æ–ª—É—á–∞–µ–º ID –∏–∑ URL
function getMovieId() {
    const urlParams = new URLSearchParams(window.location.search);
    return urlParams.get('id');
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
async function loadMovie() {
    const movieId = getMovieId();
    
    if (!movieId) {
        showError('–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }

    try {
        // 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∑—è—Ç—å –∏–∑ sessionStorage (–∫—ç—à –∏–∑ —Å–ø–∏—Å–∫–∞/–ø–æ–∏—Å–∫–∞)
        let cached = null;
        try {
            const fromStorage = sessionStorage.getItem('currentMovie');
            if (fromStorage) {
                const parsed = JSON.parse(fromStorage);
                if (parsed && (String(parsed.id) === String(movieId) || String(parsed._id) === String(movieId))) {
                    cached = parsed;
                }
            }
            if (!cached) {
                const mapStr = sessionStorage.getItem('lastRenderedMoviesMap');
                if (mapStr) {
                    const map = JSON.parse(mapStr);
                    cached = map && map[String(movieId)];
                }
            }
        } catch {}

        if (cached) {
            displayMovie(cached);
            const genre = cached.genre || (cached.genres && (Array.isArray(cached.genres) ? cached.genres[0] : Object.values(cached.genres)[0])) || '';
            loadSimilarMovies(genre);
            return;
        }

        // 2) –ï—Å–ª–∏ –Ω–µ—Ç –∫—ç—à–∞ ‚Äî –∑–∞–ø—Ä–æ—Å –∫ API –∏ –ø–æ–∏—Å–∫ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –ø–µ—Ä–µ—Ö–æ–¥—è –ø–æ next_page
        let pageUrl = `https://evloevfilmapi.vercel.app/api/list?token=${API_TOKEN}`;
        let movieData = null;
        let guard = 0;
        while (pageUrl && guard < 10 && !movieData) {
            const resp = await fetch(pageUrl);
            if (!resp.ok) throw new Error('API –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω');
            const data = await resp.json();
            console.log('–î–∞–Ω–Ω—ã–µ –æ—Ç API:', data);
            let items = [];
            if (Array.isArray(data)) items = data;
            else if (data && Array.isArray(data.results)) items = data.results;
            else if (data && Array.isArray(data.data)) items = data.data;

            movieData = items.find(item => String(item.id) === String(movieId) || String(item._id) === String(movieId)) || null;

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, –µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏
            pageUrl = movieData ? null : (data && data.next_page ? data.next_page : null);
            guard++;
        }

        if (movieData) {
            displayMovie(movieData);
            const genre = movieData.genre || (movieData.genres && (Array.isArray(movieData.genres) ? movieData.genres[0] : Object.values(movieData.genres)[0])) || '';
            loadSimilarMovies(genre);
        } else {
            // –ù–µ –Ω–∞—à–ª–∏ –≤ —Å–ø–∏—Å–∫–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É, –Ω–æ –¥–∞—ë–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ iframe
            const fallback = { id: movieId, title: `–§–∏–ª—å–º #${movieId}`, year: '–ù–µ —É–∫–∞–∑–∞–Ω', rating: '–ù/–î', genre: '–ù–µ —É–∫–∞–∑–∞–Ω', description: '–í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é –∏–∑ –ø–ª–µ–µ—Ä–∞.', poster: `https://via.placeholder.com/300x450?text=ID%20${encodeURIComponent(String(movieId))}`, type: 'film' };
            displayMovie(fallback);
        }
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞:', error);
        showError('–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∏–ª—å–º: ' + error.message);
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
function displayMovie(movie) {
    const container = document.getElementById('movie-container');
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    const rawTitle = movie.title || movie.name || movie.origin_name || `–§–∏–ª—å–º #${movie.id || movie._id || ''}`;
    const rawPoster = movie.poster || movie.poster_path || movie.cover || movie.image;
    const genresValue = movie.genre || movie.genres || null;
    const firstGenre = Array.isArray(genresValue)
        ? genresValue[0]
        : (genresValue && typeof genresValue === 'object')
            ? Object.values(genresValue)[0]
            : genresValue;
    let desc = movie.description || movie.overview || movie.plot || movie.storyline || '';
    if (!desc) {
        const parts = [];
        if (movie.type) parts.push(movie.type === 'series' ? '–°–µ—Ä–∏–∞–ª' : '–§–∏–ª—å–º');
        if (movie.quality) parts.push(`–ö–∞—á–µ—Å—Ç–≤–æ: ${movie.quality}`);
        if (movie.year) parts.push(`–ì–æ–¥: ${movie.year}`);
        if (firstGenre) parts.push(`–ñ–∞–Ω—Ä: ${firstGenre}`);
        desc = parts.length ? parts.join(' ‚Ä¢ ') : '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
    }
    const posterUrl = rawPoster || `https://via.placeholder.com/300x450?text=${encodeURIComponent(rawTitle || '–§–∏–ª—å–º')}`;

    const movieInfo = {
        id: movie.id || movie._id || '',
        title: rawTitle,
        year: movie.year || movie.release_date || '–ù–µ —É–∫–∞–∑–∞–Ω',
        rating: movie.rating || movie.vote_average || '–ù/–î',
        genre: firstGenre || '–ù–µ —É–∫–∞–∑–∞–Ω',
        description: desc,
        poster: posterUrl,
        video_url: movie.video_url || movie.stream_url || null,
        iframe_url: movie.iframe_url || null,
        type: movie.type || 'film'
    };

    container.innerHTML = `
        <div class="movie-header">
            <div class="movie-poster">
                <img src="${movieInfo.poster}" 
                     alt="${movieInfo.title}"
                     onerror="this.src='https://via.placeholder.com/300x450?text=No+Image'">
            </div>
            
            <div class="movie-info">
                <h1 class="movie-title">${movieInfo.title}</h1>
                
                <div class="movie-meta">
                    <span class="meta-item">üìÖ ${movieInfo.year}</span>
                    <span class="meta-item">‚≠ê ${movieInfo.rating}/10</span>
                    <span class="meta-item">üé≠ ${movieInfo.genre}</span>
                    ${movieInfo.type === 'serial' ? '<span class="meta-item">üì∫ –°–µ—Ä–∏–∞–ª</span>' : ''}
                </div>

                <div class="movie-description">
                    <h3>–û–ø–∏—Å–∞–Ω–∏–µ</h3>
                    <p>${movieInfo.description}</p>
                </div>

                <button class="watch-btn" onclick="setupPlayer('${String(movieInfo.id)}')">
                    ‚ñ∂Ô∏è –°–º–æ—Ç—Ä–µ—Ç—å ${movieInfo.type === 'serial' ? '—Å–µ—Ä–∏–∞–ª' : '—Ñ–∏–ª—å–º'}
                </button>
            </div>
        </div>
    `;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–ª–µ–µ—Ä–∞
    window.currentMovie = movieInfo;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–ª–µ–µ—Ä–∞
async function setupPlayer(movieId) {
    try {
        // 0) –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ displayMovie
        if (window.currentMovie) {
            const cm = window.currentMovie;
            const title = cm.title || cm.name || `–í–∏–¥–µ–æ #${movieId}`;
            if (cm.iframe_url) {
                playIframe(cm.iframe_url, title);
                return;
            }
            if (cm.video_url || cm.stream_url) {
                playMovie(cm.video_url || cm.stream_url, title);
                return;
            }
        }
        // –ò—â–µ–º —Ñ–∏–ª—å–º –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º, –ø–µ—Ä–µ—Ö–æ–¥—è –ø–æ next_page
        let pageUrl = `https://evloevfilmapi.vercel.app/api/list?token=${API_TOKEN}`;
        let movieData = null;
        let guard = 0;
        while (pageUrl && guard < 20 && !movieData) {
            const response = await fetch(pageUrl);
            const data = await response.json();
            if (Array.isArray(data)) {
                movieData = data.find(item => String(item.id) === String(movieId) || String(item._id) === String(movieId));
            } else if (data && Array.isArray(data.data)) {
                movieData = data.data.find(item => String(item.id) === String(movieId) || String(item._id) === String(movieId));
            } else if (data && Array.isArray(data.results)) {
                movieData = data.results.find(item => String(item.id) === String(movieId) || String(item._id) === String(movieId));
            }
            pageUrl = movieData ? null : (data && data.next_page ? data.next_page : null);
            guard++;
        }

        if (movieData && (movieData.iframe_url || movieData.video_url || movieData.stream_url)) {
            const title = movieData.title || movieData.name || '–í–∏–¥–µ–æ';
            // –û–±–Ω–æ–≤–∏–º –∫–∞—Ä—Ç–æ—á–∫—É, –µ—Å–ª–∏ —Ä–∞–Ω–µ–µ –±—ã–ª–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è
            try {
                const wasPlaceholder = window.currentMovie && (
                    (window.currentMovie.title && /^–§–∏–ª—å–º #/.test(window.currentMovie.title)) ||
                    (window.currentMovie.poster && /placeholder\.com/.test(window.currentMovie.poster)) ||
                    (window.currentMovie.description && window.currentMovie.description.indexOf('–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç') !== -1)
                );
                if (!window.currentMovie || wasPlaceholder) {
                    displayMovie(movieData);
                }
            } catch {}
            if (movieData.iframe_url) {
                playIframe(movieData.iframe_url, title);
            } else {
                playMovie(movieData.video_url || movieData.stream_url, title);
            }
        } else {
            // 3) –§–æ–ª–ª–±—ç–∫: –ø—Ä–æ–±—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ iframe-—É—Ä–ª—ã –ø–æ ID
            const guessMovie = `https://api.namy.ws/embed/movie/${encodeURIComponent(String(movieId))}`;
            const guessSeries = `https://api.namy.ws/embed/series/${encodeURIComponent(String(movieId))}`;
            // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—Ä–æ–±—É–µ–º movie
            playIframe(guessMovie, `–í–∏–¥–µ–æ #${movieId}`);
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø–æ–¥–≥–æ—Ç–æ–≤–∏–º –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ series, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ (–Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å CORS-–æ—à–∏–±–∫—É –∑–∞–≥—Ä—É–∑–∫–∏, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–∏—Ç—å)
        }

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        showPlayerMessage('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ');
    }
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –≤–∏–¥–µ–æ
function playMovie(videoUrl, title) {
    const placeholder = document.getElementById('player-placeholder');
    const videoContainer = document.getElementById('video-container');
    const playerTitle = document.getElementById('player-title');
    
    placeholder.style.display = 'none';
    videoContainer.style.display = 'block';
    playerTitle.textContent = title;

    // –ò—Å–ø–æ–ª—å–∑—É–µ–º video —ç–ª–µ–º–µ–Ω—Ç
    const videoPlayer = document.getElementById('video-player');
    const iframe = document.getElementById('iframe-player');
    if (iframe) {
        iframe.removeAttribute('src');
        iframe.style.display = 'none';
    }
    videoPlayer.src = videoUrl;
    videoPlayer.style.display = 'block';
    videoPlayer.load();
    
    // –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
    videoPlayer.play().catch(e => {
        console.log('–ê–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ');
    });
}

// –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ iframe
function playIframe(iframeUrl, title) {
    const placeholder = document.getElementById('player-placeholder');
    const videoContainer = document.getElementById('video-container');
    const playerTitle = document.getElementById('player-title');
    
    placeholder.style.display = 'none';
    videoContainer.style.display = 'block';
    playerTitle.textContent = title;

    const videoPlayer = document.getElementById('video-player');
    const iframe = document.getElementById('iframe-player');
    if (videoPlayer) {
        try { videoPlayer.pause(); } catch {}
        videoPlayer.removeAttribute('src');
        videoPlayer.style.display = 'none';
    }
    iframe.src = iframeUrl;
    iframe.style.display = 'block';
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ø–ª–µ–µ—Ä–µ
function showPlayerMessage(message) {
    const placeholder = document.getElementById('player-placeholder');
    const videoContainer = document.getElementById('video-container');
    
    placeholder.style.display = 'none';
    videoContainer.style.display = 'block';
    videoContainer.innerHTML = `
        <div class="player-message">
            <div style="text-align: center; padding: 50px;">
                <div style="font-size: 48px; margin-bottom: 20px;">üé¨</div>
                <h3>${message}</h3>
                <p style="color: #888; margin-top: 20px;">
                    –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Ñ–∏–ª—å–º
                </p>
            </div>
        </div>
    `;
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤
async function loadSimilarMovies(genre) {
    try {
        const url = new URL('https://evloevfilmapi.vercel.app/api/list');
        url.searchParams.set('token', API_TOKEN);
        if (genre) url.searchParams.set('genre', genre);
        url.searchParams.set('limit', '6');
        const response = await fetch(url);
        const data = await response.json();
        
        const movies = Array.isArray(data) ? data : (data.data || data.results || data.items || []);
        displaySimilarMovies(movies.slice(0, 6));
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤:', error);
        document.getElementById('similar-container').innerHTML = '<div>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã</div>';
    }
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ—Ö–æ–∂–∏—Ö —Ñ–∏–ª—å–º–æ–≤
function displaySimilarMovies(movies) {
    const container = document.getElementById('similar-container');
    
    if (!movies || movies.length === 0) {
        container.innerHTML = '<div>–ü–æ—Ö–æ–∂–∏–µ —Ñ–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }

    container.innerHTML = movies.map(movie => {
        const title = movie.title || movie.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
        const poster = movie.poster || movie.poster_path || 'https://via.placeholder.com/150x225?text=No+Image';
        const year = movie.year || movie.release_date || '–ù–µ —É–∫–∞–∑–∞–Ω';
        const id = movie.id || movie._id || '';
        return `
            <div class="similar-item" onclick="openMovie('${String(id)}')">
                <img src="${poster}" 
                     alt="${title}"
                     onerror="this.src='https://via.placeholder.com/150x225?text=No+Image'">
                <div class="similar-title">${title}</div>
                <div class="similar-year">${year}</div>
            </div>
        `;
    }).join('');
}

function openMovie(movieId) {
    window.location.href = `movie.html?id=${encodeURIComponent(String(movieId))}`;
}

function goBack() {
    window.history.back();
}

function showError(message) {
    document.getElementById('movie-container').innerHTML = `
        <div class="error">
            <h2>üòî –û—à–∏–±–∫–∞</h2>
            <p>${message}</p>
            <button onclick="goBack()">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥</button>
        </div>
    `;
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', loadMovie);