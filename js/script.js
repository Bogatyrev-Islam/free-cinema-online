// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const API_TOKEN = '3794a7638b5863cc60d7b2b9274fa32e';
const API_URL = 'https://evloevfilmapi.vercel.app/api/list';

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async function getMovies(params = {}) {
    try {
        console.log('–ó–∞–ø—Ä–æ—Å –∫ API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:', params);
        
        // –°–æ–∑–¥–∞–µ–º URL
        const url = new URL(API_URL);
        url.searchParams.append('token', API_TOKEN);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        Object.keys(params).forEach(key => {
            url.searchParams.append(key, params[key]);
        });

        const response = await fetch(url);
        
        if (!response.ok) {
            throw new Error(`–û—à–∏–±–∫–∞ HTTP: ${response.status}`);
        }
        
        const data = await response.json();
        console.log('–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ:', data);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ—Ç–≤–µ—Ç–∞
        if (data.data && Array.isArray(data.data)) {
            console.log('–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤:', data.data.length);
            return data.data; // –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç API
        } else if (Array.isArray(data.results)) {
            console.log('–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤:', data.results.length);
            return data.results; // –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç API
        } else if (Array.isArray(data)) {
            console.log('–ù–∞–π–¥–µ–Ω–æ —Ñ–∏–ª—å–º–æ–≤:', data.length);
            return data; // –ü—Ä–æ—Å—Ç–æ–π –º–∞—Å—Å–∏–≤
        } else {
            console.warn('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö:', data);
            return [];
        }
        
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
        throw error;
    }
}

// –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤
function displayMovies(containerId, movies) {
    const container = document.getElementById(containerId);
    
    if (!movies || movies.length === 0) {
        container.innerHTML = '<div class="error">–§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</div>';
        return;
    }

    container.innerHTML = movies.map(movie => {
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞ API
        const movieData = extractMovieData(movie);
        
        return `
            <div class="movie-card" onclick="openMovie('${String(movieData.id)}')">
                <img src="${movieData.poster}" 
                     alt="${movieData.title}"
                     onerror="this.src='https://via.placeholder.com/200x300?text=No+Image'">
                <div class="movie-info">
                    <div class="movie-title">${movieData.title}</div>
                    <div class="movie-year">${movieData.year} ‚Ä¢ –†–µ–π—Ç–∏–Ω–≥: ${movieData.rating}</div>
                </div>
            </div>
        `;
    }).join('');

    // –ö—ç—à–∏—Ä—É–µ–º —Ñ–∏–ª—å–º—ã –∏ –ú–ï–†–î–ñ–ò–ú —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –∫—ç—à–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ç–µ—Ä—è—Ç—å –¥—Ä—É–≥–∏–µ —Ä–∞–∑–¥–µ–ª—ã
    try {
        const newMap = {};
        movies.forEach(movie => {
            const m = extractMovieData(movie);
            if (m.id != null && m.id !== '') {
                newMap[String(m.id)] = movie;
            }
        });
        let merged = {};
        try {
            const prev = sessionStorage.getItem('lastRenderedMoviesMap');
            if (prev) merged = JSON.parse(prev) || {};
        } catch {}
        Object.assign(merged, newMap);
        window.lastRenderedMoviesMap = merged;
        sessionStorage.setItem('lastRenderedMoviesMap', JSON.stringify(merged));
    } catch (e) {
        console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫—ç—à —Ñ–∏–ª—å–º–æ–≤:', e);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞ –∏–∑ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤ API
function extractMovieData(movie) {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã API
    return {
        id: movie.id || movie._id || Math.floor(Math.random() * 1000),
        title: movie.title || movie.name || movie.ru_name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        year: movie.year || movie.release_date || '–ì–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω',
        rating: movie.rating || movie.vote_average || movie.rate || '–ù/–î',
        poster: movie.poster || movie.poster_path || movie.image || 
                `https://via.placeholder.com/200x300?text=${encodeURIComponent(movie.title || '–§–∏–ª—å–º')}`
    };
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö —Ñ–∏–ª—å–º–æ–≤ –¥–ª—è –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
function createTestMovies(containerId, count, titlePrefix) {
    const container = document.getElementById(containerId);
    const movies = [];
    
    for (let i = 1; i <= count; i++) {
        movies.push({
            id: i,
            title: `${titlePrefix} ${i}`,
            year: 2020 + (i % 5),
            rating: (7 + (i % 3)).toFixed(1),
            poster: `https://via.placeholder.com/200x300/2c3e50/ffffff?text=${encodeURIComponent(titlePrefix)}+${i}`
        });
    }
    
    displayMovies(containerId, movies);
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
async function loadAllSections() {
    try {
        console.log('–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –¥–∞–Ω–Ω—ã—Ö...');
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —Ñ–∏–ª—å–º—ã
        try {
            const popularMovies = await getMovies({
                type: 'films',
                limit: 8,
                sort: '-views'
            });
            displayMovies('popular-films', popularMovies);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö —Ñ–∏–ª—å–º–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            createTestMovies('popular-films', 8, '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥—Ä–∞–º—ã
        try {
            const dramaMovies = await getMovies({
                type: 'films',
                genre: 'drama',
                limit: 8
            });
            displayMovies('drama-films', dramaMovies);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥—Ä–∞–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            createTestMovies('drama-films', 8, '–î—Ä–∞–º–∞');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–º–µ–¥–∏–∏
        try {
            const comedyMovies = await getMovies({
                type: 'films',
                genre: 'comedy',
                limit: 8
            });
            displayMovies('comedy-films', comedyMovies);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ–º–µ–¥–∏–π, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            createTestMovies('comedy-films', 8, '–ö–æ–º–µ–¥–∏—è');
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ—Ä–∏–∞–ª—ã
        try {
            const series = await getMovies({
                type: 'serials',
                limit: 8,
                sort: '-year'
            });
            displayMovies('new-series', series);
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Ä–∏–∞–ª–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ');
            createTestMovies('new-series', 8, '–°–µ—Ä–∏–∞–ª');
        }

    } catch (error) {
        console.error('–û–±—â–∞—è –æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏:', error);
        
        // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö —Ä–∞–∑–¥–µ–ª–æ–≤
        createTestMovies('popular-films', 8, '–ü–æ–ø—É–ª—è—Ä–Ω—ã–π');
        createTestMovies('drama-films', 8, '–î—Ä–∞–º–∞');
        createTestMovies('comedy-films', 8, '–ö–æ–º–µ–¥–∏—è');
        createTestMovies('new-series', 8, '–°–µ—Ä–∏–∞–ª');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ñ–∏–ª—å–º–∞
function openMovie(movieId) {
    try {
        // –ï—Å–ª–∏ –µ—Å—Ç—å –∫—ç—à ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ñ–∏–ª—å–º –¥–ª—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã movie.html
        const idStr = String(movieId);
        let sourceMap = window.lastRenderedMoviesMap;
        if (!sourceMap) {
            const fromStorage = sessionStorage.getItem('lastRenderedMoviesMap');
            if (fromStorage) sourceMap = JSON.parse(fromStorage);
        }
        if (sourceMap && sourceMap[idStr]) {
            sessionStorage.setItem('currentMovie', JSON.stringify(sourceMap[idStr]));
        }
    } catch {}
    window.location.href = `movie.html?id=${encodeURIComponent(String(movieId))}`;
}

// –ü–æ–∏—Å–∫ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
function searchFromHeader() {
    const query = document.getElementById('header-search').value.trim();
    if (query) {
        window.location.href = `search.html?query=${encodeURIComponent(query)}`;
    } else {
        alert('–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å');
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('DOMContentLoaded', function() {
    loadAllSections();
    
    // // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏
    // const reloadButton = document.createElement('button');
    // reloadButton.textContent = 'üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É';
    // reloadButton.className = 'reload-button';
    // reloadButton.onclick = loadAllSections;
    // document.body.appendChild(reloadButton);
    
    // –ü–æ–∏—Å–∫ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Enter
    document.getElementById('header-search').addEventListener('keypress', function(e) {
        if (e.key === 'Enter') searchFromHeader();
    });
});